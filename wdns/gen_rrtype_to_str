#!/usr/bin/env python

# Copyright (c) 2009, 2011, 2012, 2015 by Farsight Security, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import sys

header_fname = sys.argv[1]
output_fname = sys.argv[2]

w = open(output_fname, 'w')

w.write('''/*
 * Copyright (c) Farsight Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
''')

w.write('''
const char *
wdns_rrtype_to_str(uint16_t rrtype)
{
    switch (rrtype) {
''')

for line in open(header_fname):
    if 'WDNS_TYPE_' in line:
        wdns_type = line.split()[1]
        rrtype = wdns_type.replace('WDNS_TYPE_','',1).replace('_', '-')
        w.write('\tcase %s: return ("%s");\n' % (wdns_type, rrtype))

w.write('''    }

    return (NULL);
}
''')

w.write('''
static struct u16str {
    uint16_t u16;
    const char *str;
} rrtypes[] = {
''')

rrtypes = []
for line in open(header_fname):
    if 'WDNS_TYPE_' in line:
        wdns_type = line.split()[1]
        rrtype = wdns_type.replace('WDNS_TYPE_','',1).replace('_', '-')
        rrtypes.append((wdns_type, rrtype))
rrtypes.sort()
for wdns_type, rrtype in rrtypes:
    w.write('\t{ %s, "%s" },\n' % (wdns_type, rrtype))

w.write('''};

#define num_rrtypes (sizeof(rrtypes) / sizeof(struct u16str))

static int
cmp_u16str(const void *a, const void *b) {
    struct u16str *u1 = (struct u16str *) a;
    struct u16str *u2 = (struct u16str *) b;
    return (strcasecmp(u1->str, u2->str));
}

static bool
convert_generic_rrtype(const char *s, long int *val) {
    char *endptr = NULL;

    if (strlen(s) <= 4)
        return (false);
    if (strncasecmp(s, "TYPE", 4) != 0)
        return (false);

    s += 4; /* skip leading "TYPE" */

    *val = strtol(s, &endptr, 10);
    if (endptr != NULL && *endptr != '\\0')
        return (false);
    if (*val < 0 || *val > 65535)
        return (false);

    return (true);
}

uint16_t
wdns_str_to_rrtype(const char *str) {
    struct u16str key, *res;
    key.str = str;
    res = bsearch(&key, rrtypes, num_rrtypes, sizeof(struct u16str), cmp_u16str);
    if (res != NULL) {
        return (res->u16);
    } else {
        long int val = 0;
        if (convert_generic_rrtype(str, &val))
            return (val);
    }
    return (0);
}
''')

w.close()
